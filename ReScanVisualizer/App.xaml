<Application x:Class="ReScanVisualizer.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:local="clr-namespace:ReScanVisualizer">
    <Application.Resources>
        <SolidColorBrush x:Key="textBoxGrey"         Color="#FF454545" />
        <SolidColorBrush x:Key="backgroundColor"     Color="#FF303030" />
        <SolidColorBrush x:Key="foregroundColor"     Color="#FFFFFFFF" />
        <SolidColorBrush x:Key="foreground2Color"    Color="#FF000000" />
        <SolidColorBrush x:Key="backgroundListColor" Color="#25FFFFFF" />
        <SolidColorBrush x:Key="white24"             Color="#24FFFFFF" />
        <SolidColorBrush x:Key="white10"             Color="#10FFFFFF" />
        <SolidColorBrush x:Key="gray24"              Color="#24303030" />
        <SolidColorBrush x:Key="linkMouseBlueColor"  Color="#FF2196F3" />
        <SolidColorBrush x:Key="linkMouseOverColor"  Color="#FFF44336" />

        <Style x:Key="menuItemTitle" TargetType="{x:Type MenuItem}">
            <Setter Property="Foreground" Value="{StaticResource foregroundColor}" />
        </Style>
        <Style x:Key="menuItemItem" TargetType="{x:Type MenuItem}">
            <Setter Property="Foreground" Value="{StaticResource foreground2Color}" />
        </Style>

        <Style TargetType="{x:Type TextBlock}" x:Key="helpWindowTitle">
            <Setter Property="FontSize" Value="36"/>
            <Setter Property="HorizontalAlignment" Value="Stretch"/>
            <Setter Property="Height" Value="125"/>
            <Setter Property="Padding" Value="50"/>
            <Setter Property="Background" Value="{StaticResource backgroundListColor}" />
        </Style>

        <Style TargetType="{x:Type Button}">
            <Setter Property="Margin"      Value="5" />
            <Setter Property="MinWidth"    Value="50" />
            <Setter Property="Foreground"  Value="White" />
            <Setter Property="Background"  Value="Transparent"/>
            <Setter Property="BorderBrush" Value="Transparent" />
            <Setter Property="HorizontalContentAlignment" Value="Center" />
            <Setter Property="VerticalContentAlignment"   Value="Center" />
            <Setter Property="ToolTipService.ShowOnDisabled" Value="True" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" Padding="5">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="#24FFFFFF"/>
                    <Setter Property="Cursor" Value="Hand" />
                </Trigger>
                <Trigger Property="IsEnabled" Value="False">
                    <Setter Property="Opacity" Value="0.5" />
                </Trigger>
                <Trigger Property="IsPressed" Value="True">
                    <Setter Property="Foreground" Value="#FF0084F1" />
                </Trigger>
            </Style.Triggers>
        </Style>
        <Style TargetType="{x:Type Button}" x:Key="myButtonIcon">
            <Setter Property="Margin"      Value="5" />
            <Setter Property="Width"       Value="30" />
            <Setter Property="Height"      Value="30" />
            <Setter Property="Foreground"  Value="White" />
            <Setter Property="Background"  Value="Transparent"/>
            <Setter Property="BorderBrush" Value="Transparent" />
            <Setter Property="HorizontalContentAlignment" Value="Center" />
            <Setter Property="VerticalContentAlignment"   Value="Center" />
            <Setter Property="ToolTipService.ShowOnDisabled" Value="True" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" Padding="2.5">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="#24FFFFFF"/>
                    <Setter Property="Cursor" Value="Hand" />
                </Trigger>
                <Trigger Property="IsEnabled" Value="False">
                    <Setter Property="Opacity" Value="0.5" />
                </Trigger>
            </Style.Triggers>
        </Style>
        <Style TargetType="{x:Type TextBlock}" x:Key="myTextBlock">
            <Setter Property="HorizontalAlignment" Value="Center" />
            <Setter Property="VerticalAlignment"   Value="Center" />
            <Setter Property="TextAlignment"       Value="Center" />
            <Setter Property="TextWrapping"        Value="Wrap"   />
            <Setter Property="Foreground"          Value="White" />
            <Setter Property="Margin"              Value="5" />
        </Style>
        <Style TargetType="{x:Type TextBlock}" x:Key="myTextBlockLeft" BasedOn="{StaticResource myTextBlock}" >
            <Setter Property="HorizontalAlignment" Value="Left" />
        </Style>
        <Style TargetType="{x:Type TextBlock}" x:Key="myTextBlockRight" BasedOn="{StaticResource myTextBlock}" >
            <Setter Property="HorizontalAlignment" Value="Right" />
        </Style>
        <Style TargetType="{x:Type TextBox}"   x:Key="myTextBox">
            <Setter Property="HorizontalContentAlignment"   Value="Center" />
            <Setter Property="VerticalContentAlignment"     Value="Center" />
            <Setter Property="Foreground"                   Value="White" />
            <Setter Property="Background"                   Value="{StaticResource textBoxGrey}"/>
            <Setter Property="BorderBrush"                  Value="#202020" />
            <Setter Property="Margin"                       Value="5" />
            <Setter Property="Padding"                      Value="5 0" />
            <Setter Property="ToolTip" Value="{Binding RelativeSource={RelativeSource Self}, Path=Text, UpdateSourceTrigger=PropertyChanged, Mode=OneWay}" />
            <Setter Property="ToolTipService.ShowOnDisabled" Value="True" />
            <Style.Triggers>
                <Trigger Property="IsEnabled" Value="False">
                    <Setter Property="Opacity" Value="0.75" />
                </Trigger>
                <Trigger Property="Validation.HasError" Value="True">
                    <Setter Property="ToolTip" Value="{Binding RelativeSource={RelativeSource Self}, Path=(Validation.Errors)[0].ErrorContent}" />
                </Trigger>
            </Style.Triggers>
        </Style>
        <Style TargetType="{x:Type ToggleButton}" x:Key="toggleSwitch">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                        <Border x:Name="border" Height="20" Background="Transparent" CornerRadius="10" BorderBrush="#B0B0B0" BorderThickness="1">
                            <Ellipse x:Name="circle" Height="12" Width="12" Fill="#B0B0B0" HorizontalAlignment="Left" Margin="4 0" />
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsChecked" Value="True">
                                <Setter TargetName="circle" Property="HorizontalAlignment" Value="Right" />
                                <Setter TargetName="border" Property="BorderBrush" Value="#F0F0F0" />
                                <Setter TargetName="circle" Property="Fill"        Value="#F0F0F0" />
                            </Trigger>
                            <Trigger Property="IsPressed" Value="True">
                                <Setter TargetName="circle" Property="Height" Value="8" />
                                <Setter TargetName="circle" Property="Width"  Value="8" />
                                <Setter TargetName="circle" Property="Margin" Value="6 0" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style TargetType="{x:Type ComboBox}" x:Key="myComboBox">
            <Setter Property="Margin" Value="5" />
            <Setter Property="MinWidth" Value="150" />
            <Setter Property="HorizontalAlignment" Value="Left" />
            <Setter Property="HorizontalContentAlignment" Value="Center" />
            <Setter Property="VerticalContentAlignment" Value="Center" />
        </Style>
    </Application.Resources>
</Application>
